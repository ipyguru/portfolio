import TelegramBot from 'node-telegram-bot-api'

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN)
const chatId = process.env.TELEGRAM_CHAT_ID

/**
 * Sends a message to a specified Telegram chat.
 * @param {string} message - The message to be sent.
 */
const sendTelegramMessage = async (message) => {
    try {
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error)
    }
}

/**
 * API handler for processing form submissions.
 * @param {object} req - The request object.
 * @param {object} res - The response object.
 */
export default async function handler(req, res) {
    if (req.method === 'POST') {
        try {
            // –î–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            const { recaptchaToken, name, email, subject, message } = req.body

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ reCAPTCHA
            if (!recaptchaToken) {
                return res.status(400).json({ success: false, message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω reCAPTCHA' })
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
            const recaptchaSecretKey = process.env.RECAPTCHA_SECRET_KEY
            const recaptchaUrl = 'https://www.google.com/recaptcha/api/siteverify'

            const recaptchaResponse = await fetch(recaptchaUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    secret: recaptchaSecretKey,
                    response: recaptchaToken,
                }),
            })

            const recaptchaResult = await recaptchaResponse.json()

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA:', recaptchaResult)

            if (!recaptchaResult.success) {
                return res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA' })
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            const telegramMessage = `
                *üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!*

                üë§ *–ò–º—è:* ${name}
                ‚úâÔ∏è *Email:* ${email}
                üóÇÔ∏è *–¢–µ–º–∞:* ${subject}

                üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
                ${message}

                ---
            `

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await sendTelegramMessage(telegramMessage)

            return res.status(200).json({ success: true })
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:', error)
            return res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
        }
    } else {
        res.setHeader('Allow', ['POST'])
        res.status(405).end(`–ú–µ—Ç–æ–¥ ${req.method} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω`)
    }
}